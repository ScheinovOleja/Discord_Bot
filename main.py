import asyncio as asyncio
import discord
from discord.ext.commands import Bot
from equipments import helmets, armours, boots, weapons, bracers
from mobs import mobs
from create_db import database, InfoOnUsers, Helmets, Armours, Bracers, Boots, Weapons, Mobs
from settings import settings


class RpgBot:

    def __init__(self, token):
        database.connect()
        database.create_tables([InfoOnUsers, Helmets, Armours, Bracers, Boots, Weapons, Mobs])
        self.emojis = ['‚öî', 'üòÄ', 'üòÑ', 'üòá']
        self.all_members = []
        self.roles = {}
        self.token = token
        self.bot = Bot(command_prefix='/', intents=discord.Intents.all())
        self.prepare_clients()

    def run(self):
        self.bot.run(self.token)

    def prepare_clients(self):

        async def check_to_channel(message):
            if message.channel.name == '–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ' and message.author != self.bot.user:
                await message.channel.purge(limit=1)
                return True

        def add_user_to_db(member):
            user_data = [{'name': member.name + member.discriminator,
                          'user_id_discord': member.id,
                          'experience': 0,
                          'money': 10,
                          'helmet': 1,
                          'armour': 1,
                          'boots': 1,
                          'weapon': 1}]
            InfoOnUsers.insert_many(user_data).execute()

        @self.bot.event
        async def on_ready():
            for role in self.bot.guilds[0].roles:
                if role.id == 768484322944352296 or role.id == 770550789345247234:
                    continue
                else:
                    self.roles[role.name] = role
            print(f'–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ {self.bot.user}!')
            print(f'–°–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π - {self.roles}')

        @self.bot.event
        async def on_member_join(member):
            check = False
            add_user_to_db(member)
            guild = member.guild
            user_id = member.id
            if guild.system_channel is not None:
                await guild.system_channel.send(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, {member.mention}!–¢—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {guild.name}")
                message_bot = await guild.system_channel.send(f'–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∫–ª–∞—Å—Å!(–í–æ–∏–Ω, –ø–∞–ª–∞–¥–∏–Ω, –ª—É—á–Ω–∏–∫, —Å—Ç—Ä–µ–ª–æ–∫)')
                for emoji in self.emojis:
                    await message_bot.add_reaction(emoji)
                while not check:
                    reaction, user = await self.bot.wait_for('reaction_add',
                                                             check=lambda reaction, user:
                                                             (reaction.emoji == '‚öî'
                                                              or reaction.emoji == 'üòÄ'
                                                              or reaction.emoji == 'üòÑ'
                                                              or reaction.emoji == 'üòá')
                                                             and user.bot is False)
                    if user_id == user.id:
                        if reaction.emoji == '‚öî':
                            await member.add_roles(self.roles['–í–æ–∏–Ω'])
                        elif reaction.emoji == 'üòÄ':
                            await member.add_roles(self.roles['–ü–∞–ª–∞–¥–∏–Ω'])
                        elif reaction.emoji == 'üòÑ':
                            await member.add_roles(self.roles['–õ—É—á–Ω–∏–∫'])
                        elif reaction.emoji == 'üòá':
                            await member.add_roles(self.roles['–°—Ç—Ä–µ–ª–æ–∫'])
                        await guild.system_channel.purge(limit=50)
                        check = True
                        await guild.system_channel.send('–ñ–¥–µ–º —Ç–µ–±—è –≤ —Ç–∞–≤–µ—Ä–Ω–µ, —Å—Ç—Ä–∞–Ω–Ω–∏–∫!', )

        @self.bot.event
        async def on_member_remove(member):
            guild = member.guild
            if guild.system_channel is not None:
                await guild.system_channel.send(f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–∞—Å –ø–æ–∫–∏–Ω—É–ª {member.mention}! –ù–∞–º –±—É–¥–µ—Ç –Ω–µ —Ö–≤–∞—Ç–∞—Ç—å –µ–≥–æ(')
            InfoOnUsers.delete().where(InfoOnUsers.user_id_discord == member.id).execute()

        @self.bot.command(pass_context=True)
        async def hello(message):
            if await check_to_channel(message):
                return
            await message.channel.send(f'–ü—Ä–∏–≤–µ—Ç, {message.author.mention}!')

        @self.bot.command(pass_context=True)
        async def clear(message):
            await message.channel.purge(limit=50)

        @self.bot.command(pass_context=True)
        async def all_members(message):
            if await check_to_channel(message):
                return
            self.all_members = self.bot.get_all_members()
            await message.channel.send(f'{[member.mention for member in self.all_members]}\n')

        @self.bot.command(pass_context=True)
        async def helped(message):
            if await check_to_channel(message):
                return
            await message.channel.send('–≠—ç—ç—ç')

        @self.bot.command(pass_context=True)
        async def create_db(message):
            if await check_to_channel(message):
                return
            if message.author.id == settings['admin']:
                Helmets.insert_many(helmets).execute()
                Armours.insert_many(armours).execute()
                Bracers.insert_many(bracers).execute()
                Boots.insert_many(boots).execute()
                Weapons.insert_many(weapons).execute()
                Mobs.insert_many(mobs).execute()
                await message.channel.send(f'–ë–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞')
            else:
                await message.channel.send('–¢—ã –∫–∞–∫ –≤–æ–æ–±—â–µ –æ–± —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ —É–∑–Ω–∞–ª?. –ù—É-–∫–∞ –Ω–∞—Ö–µ—Ä –ø–æ—à–µ–ª –æ—Ç—Å—é–¥–∞!!!')

        @self.bot.command(pass_context=True)
        async def stats(message):
            if await check_to_channel(message):
                return
            try:
                data = InfoOnUsers.get(InfoOnUsers.user_id_discord == message.author.id)
                await message.channel.send(f'{data}')
            except Exception as exc:
                await message.channel.send(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ê–¥–º–∏–Ω—É!\n{exc}')

        @self.bot.command(pass_context=True)
        async def add_all_to_db(message):
            if await check_to_channel(message):
                return
            for user in message.guild.members:
                if user.bot:
                    continue
                else:
                    user_data = [{'name': user.name + user.discriminator,
                                  'user_id_discord': user.id,
                                  'health': 100,
                                  'experience': 0,
                                  'money': 10,
                                  'healing_potion': 1,
                                  'helmet': 1,
                                  'armour': 1,
                                  'bracer': 1,
                                  'boots': 1,
                                  'weapon': 1}]
                    InfoOnUsers.insert_many(user_data).execute()
                await message.channel.send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ë–î.')

        async def user_damage_calc(user):
            for info in InfoOnUsers.select().where(InfoOnUsers.user_id_discord == user.id):
                damage_armour = info.armour.power
                damage_boots = info.boots.power
                damage_bracers = info.bracer.power
                damage_helmets = info.helmet.power
                damage_weapons = info.weapon.power
                total_damage = sum([damage_armour, damage_boots, damage_helmets, damage_bracers, damage_weapons])
                return total_damage

        async def calc_exp_money(user, mob):
            exp_money = InfoOnUsers.get(InfoOnUsers.user_id_discord == user.id)
            exp_money.experience += mob["experience"]
            exp_money.money += mob["money"]
            exp_money.save()

        async def battle(message, user, mob):
            await user.send(f'–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å—Ä–∞–∂–µ–Ω–∏–µ —Å –º–æ–±–æ–º - {message.content}\n'
                            f'–£ –≤–∞—Å –µ—Å—Ç—å 5 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã –∞—Ç–∞–∫–æ–≤–∞—Ç—å –≤ –ø–æ–ª–Ω—É—é —Å–∏–ª—É, –∏–Ω–∞—á–µ –ø—Ä–æ–π–¥–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–≤–∏–Ω–∞ —É—Ä–æ–Ω–∞')
            user_damage = await user_damage_calc(user)
            user_stats = InfoOnUsers.get(InfoOnUsers.user_id_discord == user.id)
            while not mob['health'] <= 0:
                fight = await user.send(f'–ë–ï–ô!!!!! –£ {mob["name"]} –≤—Å–µ–≥–æ {mob["health"]} –∑–¥–æ—Ä–æ–≤—å—è')
                await fight.add_reaction('‚öî')

                def check_reaction(reaction, user):
                    return user == message.author and str(reaction.emoji) == '‚öî'

                try:
                    reaction, user = await self.bot.wait_for('reaction_add', timeout=5.0, check=check_reaction)
                except asyncio.TimeoutError:
                    await user.send(
                        f'–¢—ã —á–µ–≥–æ –º–µ—à–∫–∞–µ—à—å!? {mob["name"]} –±—å–µ—Ç –∏ –Ω–∞–Ω–æ—Å–∏—Ç {mob["damage"]}. '
                        f'–£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å {user_stats.health} –∑–¥–æ—Ä–æ–≤—å—è')
                    user_stats.health -= mob["damage"]
                    user_stats.save()
                else:
                    mob['health'] -= user_damage
                    await user.send(f'–ù–∞–Ω–µ—Å–µ–Ω –ø–æ–ª–Ω—ã–π —É—Ä–æ–Ω –≤ —Ä–∞–∑–º–µ—Ä–µ {user_damage}')
                if mob['health'] <= 0:
                    break
                else:
                    user_stats.health -= mob["damage"]
                    await user.send(f'{mob["name"]} –±—å–µ—Ç –∏ –Ω–∞–Ω–æ—Å–∏—Ç {mob["damage"]}. '
                                    f'–£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å {user_stats.health} –∑–¥–æ—Ä–æ–≤—å—è')
                    user_stats.save()
            await calc_exp_money(user, mob)
            await user.send(
                f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –ø–æ–±–µ–¥–∏–ª–∏ –º–æ–±–∞ –∏ –ø–æ–ª—É—á–∏–ª–∏ {mob["experience"]} - –æ–ø—ã—Ç–∞ –∏ {mob["money"]} –º–æ–Ω–µ—Ç!\n'
                f'–î–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –±–æ—è –∑–∞–Ω–æ–≤–æ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "/mob" –≤ –ª–æ–∫–∞—Ü–∏–∏, –ª–∏–±–æ –∂–µ –∑–¥–µ—Å—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É '
                f'"/mob (–Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏)"'
            )

        @self.bot.command(pass_context=True)
        async def fight(message, location=None):
            if location is None:
                location = message.channel.name
            user = message.author
            mobs = []
            await user.send(
                f'–î–∞—Ä–æ–≤–∞! –í–æ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–±–æ–≤ –≤ –ª–æ–∫–∞—Ü–∏–∏ "{location}" :')
            for moby in Mobs.select().where(Mobs.location == location.lower()):
                await user.send(
                    f'–ú–æ–± - {moby.name}, \n'
                    f'–ó–¥–æ—Ä–æ–≤—å–µ - {moby.health}, \n'
                    f'–î–∞–º–∞–≥ - {moby.damage}, \n'
                    f'–û–ø—ã—Ç –∑–∞ —É–±–∏–π—Å—Ç–≤–æ - {moby.experience}, \n'
                    f'–ó–æ–ª–æ—Ç–∞ –∑–∞ —É–±–∏–π—Å—Ç–≤–æ - {moby.money}, \n'
                    '==============================================='
                )
                mobs.append(moby.name)
            await user.send('–í—ã–±–∏—Ä–∞–π –º–æ–±–∞(–ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –µ–≥–æ –∏–º—è)')

            def check_msg(msg):
                for mob in Mobs.select():
                    if msg.content.lower() == mob.name:
                        return msg.content.lower() == mob.name

            m = await self.bot.wait_for('message', check=check_msg)
            for bei in Mobs.select().where(Mobs.name == m.content.lower()):
                being = {
                    'name': bei.name,
                    'health': bei.health,
                    'damage': bei.damage,
                    'experience': bei.experience,
                    'money': bei.money,
                }
            if m:
                await battle(m, user, being)

        @self.bot.command(pass_context=True)
        async def heal(message):
            healing = InfoOnUsers.get(InfoOnUsers.user_id_discord == message.author.id)
            if healing.healing_potion == 0:
                await message.channel.send('–•–∏–ª–æ–∫ –Ω–µ—Ç, –∏–¥–∏ –≤ –∂–æ–ø—É')
            else:
                healing.healing_potion -= 1
                healing.health = 100
                healing.save()
                await message.channel.send('–ù—É —Ç–µ–ø–µ—Ä—å —Ç—ã –ø–æ–ª–æ–Ω —Å–∏–ª, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é!')


if __name__ == "__main__":
    bot = RpgBot(settings['token'])
    bot.run()
